{"version":3,"sources":["components/Navbar.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","rel","id","this","props","account","width","height","src","concat","Identicon","toString","Component","Main","_this","role","style","maxWidth","onSubmit","event","preventDefault","content","postContent","value","createPost","type","ref","input","placeholder","required","posts","map","post","key","author","window","web3","utils","fromWei","tipAmount","name","onClick","toWei","tipPost","target","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","socialNetwork","postCount","loading","bind","assertThisInitialized","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","net","getId","networkId","networkData","SocialNetwork","networks","Contract","abi","address","methods","i","toConsumableArray","sort","b","_this2","send","from","once","receipt","_this3","components_Navbar","components_Main","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f6fb01a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\n\nclass Navbar extends Component {\n\n    render() {\n        return (\n            <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n            <a\n                className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n                href=\"#\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                KY Social\n            </a>\n            <ul className=\"navbar-nav px-3\">\n                <li className=\"nav-item text-nowrap d-one d-sm-none d-sm-block\">\n                <small className=\"text-secondary\">\n                    <small id=\"account\">{this.props.account}</small>\n                </small>\n                { this.props.account\n                    ? <img \n                        className='ml-2'\n                        width='30'\n                        height='30'\n                        src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\n                    />\n                    : <span></span>\n                }\n                </li>\n            </ul>\n            </nav>\n\n        );\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\n\nclass Main extends Component {\n\n    render() {\n        return (\n            <div className=\"container-fluid mt-5\">\n                <div className=\"row\">\n                    <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '500px' }}>\n                        <div className=\"content mr-auto ml-auto\">\n                            <p>&nbsp;</p>\n                            <form onSubmit={(event) => {\n                                event.preventDefault()\n                                const content = this.postContent.value\n                                this.props.createPost(content)\n                            }}>\n                                <div className=\"form-group mr-sm-2\">\n                                    <input\n                                        id=\"postContent\"\n                                        type=\"text\"\n                                        ref={(input) => { this.postContent = input }}\n                                        className=\"form-control\"\n                                        placeholder=\"What's on your mind?\"\n                                        required />\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-primary btn-block\">Share</button>\n                            </form>\n                            <p>&nbsp;</p>\n                            { this.props.posts.map((post, key) => {\n                            return(\n                                <div className=\"card mb-4\" key={key}>\n                                <div className=\"card-header\">\n                                    <img \n                                    className='mr-2'\n                                    width='30'\n                                    height='30'\n                                    src={`data:image/png;base64,${new Identicon(post.author, 30).toString()}`}\n                                    />\n                                    <small className=\"text-muted\">{post.author}</small>\n                                </div>\n                                <ul id=\"postList\" className=\"list-group list-group-flush\">\n                                    <li className=\"list-group-item\">\n                                    <p>{post.content}</p>\n                                    </li>\n                                    <li key={key} className=\"list-group-item py-2\">\n                                    <small className=\"float-left mt-1 text-muted\">\n                                        TIPS: {window.web3.utils.fromWei(post.tipAmount.toString(), 'Ether')} ETH\n                                    </small>\n                                    <button \n                                        className=\"btn btn-link btn-sm float-right pt-0\"\n                                        name={post.id}\n                                        onClick={(event) => {\n                                            let tipAmount = window.web3.utils.toWei('0.1', 'Ether')\n                                            // Tip Post Function\n                                            this.props.tipPost(event.target.name, tipAmount)\n                                        }}\n                                    >\n                                        TIP 0.1 ETH\n                                    </button>\n                                    </li>\n                                </ul>\n                                </div>\n                            )\n                            })}\n                        </div>\n                    </main>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Main;","import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport './App.css';\nimport SocialNetwork from '../abis/SocialNetwork.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    // Network ID\n    const networkId = await web3.eth.net.getId()\n    const networkData = SocialNetwork.networks[networkId]\n    if(networkData) {\n      const socialNetwork = web3.eth.Contract(SocialNetwork.abi, networkData.address)\n      this.setState({ socialNetwork })\n      const postCount = await socialNetwork.methods.postCount().call()\n      this.setState({ postCount })\n      // Load Posts\n      for(var i =1; i <= postCount; i++) {\n        const post = await socialNetwork.methods.posts(i).call()\n        this.setState({\n          posts: [...this.state.posts, post]\n        })\n      }\n      // Sort posts. Show highest tipped posts first\n      this.setState({\n        posts: this.state.posts.sort((a,b) => b.tipAmount - a.tipAmount )\n      })\n      this.setState({ loading: false })\n    } else {\n      window.alert('SocialNetwork contract not deployed to detected network.')\n    }\n  }\n\n  createPost(content) {\n    this.setState({ loading: true })\n    this.state.socialNetwork.methods.createPost(content).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  tipPost(id, tipAmount) {\n    this.setState({ loading: true })\n    this.state.socialNetwork.methods.tipPost(id).send({ from: this.state.account, value: tipAmount })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    }) \n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      socialNetwork: null,\n      postCount: 0,\n      posts: [],\n      loading: true\n    }\n\n    this.createPost = this.createPost.bind(this)\n    this.tipPost = this.tipPost.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading \n          ? <div id =\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main \n              posts={this.state.posts}\n              createPost={this.createPost}\n              tipPost={this.tipPost}\n            />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}